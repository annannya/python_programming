#example of global variable
x = "awsome" #declaring a variable as global variable of str type

def myfun():  # defining a fx
    print("Python is ",x)
myfun() #fx call

  # o/p Python is awsome

# declaring local and global variable in same fx
x ="awsome"

def myfun():
    x = "fantastic" # local variable declared inside the fx
    print("python is "+ x) # this will use local variable for o/p
myfun()
print("python is "+ x) #this will use global variable for o/p

  #o/p python is fantstic
  #o/p python is awsome

# using a global variavle inside a fx by using global keyword
def myfun():
    global x #declaring a global variable inside a fx by using global keyword
    x = "awsome" #assigning value to the variable
myfun()
print("python is "+ x)

  #o/p python is awsome


#we can change the value of global variable inside a function by using global keyword

x ="awsome"
def myfun():
    global  x
    x = "fantastic"
myfun()
print("python is "+ x)
   #o/p python is fantastic


# operators in Python
# Arithmetic Operator

x = 5
y =3
print(x+y) #o/p 8
print(x-y) #o/p 2
print(x*y) #o/p 15
print(x/y) #o/p 1.6666....67
print(x%y) #o/p reminder i.e 2
print(x**y) #o/p 5*5*5=125
print(x//y) #o/p 1 the floor division // symbols the result down to the nearest whole number



# Assignment Operator

x = 5
print(x) #o/p 5
x+=3
print(x) #o/p 8
x-= 3
print(x) #o/p 2
x*=3
print(x) #o/p 15
x/=3
print(x) #o/p 1.666...67
x%=3
print(x) #o/p 2
x//=3
print(x) #o/p 1
x&=3
print(x) #o/p 1
x|=3
print(x) #o/p 7
x^=3
print(x) #o/p 6

x>>=3
print(x) #o/p 0
x<<=3
print(x) #o/p 40


# Comparision Operator

x= 5
y=5

print(x==y) #o/p true
print(x!=y) #o/p false
print(x>y) #o/p false
print(x<y) #o/p false
print(x>=y) #o/p true
print(x<=y) #o/p true


# Logical Operator
# AND OPERATOR:- it returns TRUE only if both the operands are TRUE

x=2
y=3
z=-4

if x>0 and y>0:
    print("all are greater then 0 ")
if x>0 and y>0 and z>0:
    print("all are greater then 0")

else:
    print("atleast one is smaller then 0")

# all are greater then 0
# atleast one is smaller then 0


 #another example
x=2
y=3
z=0

if x and y and z: # x and y are greater then 0 so its boolean value is true but z is 0 so it will be false
    print("all values have boolean value as true")

else:
    print("atleast one boolean value is false ")

# o/p atleast one boolean value is false 
# if 1st value evaluated to be FALSE then the future expression wont be evaluated


# OR OPERATOR
x=2
y=-3
z=0

if x>0 or y>0:
    print("either one value is greater then 0")
else:
    print("no one is greater then 0")
if  y>0 or z>0:
    print("either one vale is greater then 0")
else:
    print("no one is greater then 0")
#o/p either one value is greater then 0
#o/p no one value is greater then 0


# Another example
x=2
y=-3
z=0

if x or y or z:
    print("atleast one value has a boolean value to TRUE")
else:
    print("none of the values are evaluated to true")
#o/p atleast one vale has a boolean value to TRUE
 
# If one value evaluates to TRUE then the future expression will not be evaluated


# OR OPERATOR

x=2
if not x:  #this if checks for x=0 but x is not equal to 0 this statement will not execute
    print("boolean value of x is TRUE")
if not (x%3==0 or x%2==0):
    print("2 is not divisible by 3 and 2")
else:
    print("2 is divisible by either 3 or 2")
    
    #o/p 2 is divisible by either 3 or 2


# IDENTITY OPERATOR
#IS OPERATOR

x=5
y=5
if x is y:
    print("both x and y refer to same object")
print(id(x))
print(id(y))
#o/p both x and y refer to same object
# 182336
# 182336
#both x and y shares same memory location

# NOT IS OPERATOR
x=[1,2,3]
y=[1,2,3]
z=x
print(id(x))
print(id(y))
print(id(z))
print(x is not y)
print(x is not z)
print(x!=y)

#o/p 2345
#o/p 5678
#o/p 2345
#o/p true
#o/p false
#o/p true



# MEMBERSHIP OPERATOR
# IN OPERATOR
x=[1,2,3,4]
y=[1,5,6,4]

for i in x:
    if i in y:
        print("overlapping")
    else:
        print("not overlapping")
        
#o/p overlapping
#o/p not overlapping
#o/p not overlapping
#o/p overlapping


# BITWISE OPERATOR
# BITWISE AND &
a=10
b=2
print(a&b) # 10-> 01010 & 2->00010 = 00010 = 2

# BITWISE OR |
a=10
b=2
print(a|b) # 10-> 01010 | 2->00010 = 01010=10

# BITWISE NOT ~
a=10
b=2
print(~b) #o/p -3
# since bitwise negation inverts the sign bits, we now have a negative number that we have to convert into 2s complement

# BITWISE XOR ^
a=10
b=2
print(a^b) # 10-> 0001010 ^ 0000010 = 0001000 = 8

# FOR LOOP ITERATION WITH LIST TUPLE DICTIONARY SET AND STRING using TRY AND EXCEPT 
print("list")
l=[1,2,3,'ananya']
for i in range(len(l)):
    print(l[i])

print("tuple")
t=(5,6,7,'bhavi')
for i in range(len(t)):
    print(t[i])

print("dictionary")
d=dict()
d["xyz"]=123
d["abc"]=456
for i in d:
    print(i,d[i])

print("set")
try:
    s={"aditya",(1,2,3,4),34,[5,6,7]}
    for i in s:
        print(i)
except Exception as e:
    print(e)

print("string")
str="ananya"
for i in str:
    print(i,end="") #[end=""] jb hum ko ek hi line m print krvana hota h tb hum ye use krte h

#o/p list
1
2
3
ananya
tuple
5
6
7
bhavi
dictionary
xyz 123
abc 456
set
unhashable type: 'list'
string
ananya


#TERNARY OPERATOR

#TERNARY OPERATOR WITH TUPLE DICTIONARY LAMBDA

#using tuple for selecting an item
#(if_test_false if_test_true) [test]
#if [a<b] is true it will return 1,so element with 1 index will get print
#if [a<b] is false it will return 0, so element with 0 index will get print
a,b=10,20
print((b,a) [a<b])
#true-1 o/p 10


#using dictionary for selecting an item
#this is basically dictionary lookup expression it is a way to look up a value in a dictionary
#dictionary {True:a,False:b} has two values keys True and False and values a and b respectively
#if a<b is True then vale of True will be printed
#else if a<b is false then the valse of False will be printed
print({True:a,False:b} [a>b])


print((lambda :a, lambda :b)[a>b]())
#lambda is more efficient then above two
#bcoz in lambda we are assure that only one expression is evaluated unlike in tuple and dictionary


#o/p10
20
10

#OPERATOR OVERLOADING

#+ operator
print(1+2)
print("ananya" +"sahu")
a=[1,2,3]
b=[4,5,6]
print(a+b)

#o/p3
ananyasahu
[1, 2, 3, 4, 5, 6]

